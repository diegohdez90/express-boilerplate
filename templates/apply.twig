{% extends "./base.twig" %}

{% block content %}
  <body>
    <div id="request" class="container">
        <div class="row">
            <div class="col-sm-8">
                <div class="jumbotron">
                    <h3>{{ title }}</h3>
                            <form
                                    class="needs-validation"
                                    method="POST"
                                    v-on:submit.prevent="post"
                                    novalidate>
                            <div class="form-group row" v-for="(field, index) in fields">
                                    <label class="col-sm-2 col-form-label" :for="field.name">${field.label}</label>
                                    <div class="col-sm-10">
                                        <input
                                                class="form-control"
                                                type="text"
                                                :name="field.name"
                                                :placeholder="fields[index].placeholder"
                                                v-bind="fields[index]"
                                                @input="update($event, index)"
                                                required />
                                    </div>
                                    <div class="invalid-feedback d-block">
                                        ${field.error}
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <div class="col-sm-12">
                                        <div class="form-group row">
                                            <button
                                                    class="btn btn-secondary"
                                                    type="submit"
                                            >Enviar</button>
                                        </div>
                                    </div>
                                </div>
                        </form>
                        <div class="row">
                                ${successMessage}
                            </div>
                            <div class="row">
                                ${globalError}
                            </div>
                </div>
            </div>
            <div class="col-sm-4">
                <div class="alert alert-success" role="alert">
                    <h4 class="alert-heading">Well done!</h4>
                    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>
                    <hr />
                    <p class="mb-4">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>
                </div>
            </div>
        </div>
    </div>
  </body>
    {% include './scripts.twig' %}

<script>
const app = new Vue({
    delimiters: ['${', '}'],
    el: '#request',
    data: {
    successMessage: '',
    globalError: '',
    fields: [
        {
        label: 'Nombre',
        name: 'requestName',
        placeholder: 'Nombre completo',
        value: '',
        error: ''
        },
        {
        label: 'Hotel',
        name: 'hotel',
        placeholder: 'Nombre completo del Hotel',
        value: '',
        error: ''
        },
        {
        label: 'Puesto',
        name: 'role',
        placeholder: 'Puesto en el hotel',
        value: '',
        error: ''
        },
        {
        label: 'Telefono de contacto',
        name: 'hotelContactPhone',
        placeholder: 'Telefono de contacto del hotel',
        value: '',
        error: ''
        },
        {
        label: 'Email',
        name: 'email',
        placeholder: 'Correo electronico',
        value: '',
        error: ''
        }
    ]
    },
    methods: {
    update: (e, index) => {
        app.fields[index].value = e.target.value;
    },
    post: (e) => {
        e.preventDefault();
        app.fields.map((field) => {
        field.error = ""
        });
        axios.post('/request', {
        requestName: app.fields[0].value,
        hotel: app.fields[1].value,
        role: app.fields[2].value,
        hotelContactPhone: app.fields[3].value,
        email: app.fields[4].value
        })
            .then(res => {
            console.log(res);
            app.successMessage = res.data.message;
            })
            .catch(err => {
            console.log(err.response);
            if (typeof errors === "object") {
                app.fields.map(field => {
                if (errors[field.name] != null)
                    field.error = errors[field.name].message
                });
            } else {
                data.globalError = err.statusText;
            }
            })
    }
    }
});

</script>
<script>
(function() {
  'use strict';
  window.addEventListener('load', function() {
    // Fetch all the forms we want to apply custom Bootstrap validation styles to
    var forms = document.getElementsByClassName('needs-validation');
    // Loop over them and prevent submission
    var validation = Array.prototype.filter.call(forms, function(form) {
      form.addEventListener('submit', function(event) {
        if (form.checkValidity() === false) {
          event.preventDefault();
          event.stopPropagation();
        }
        form.classList.add('was-validated');
      }, false);
    });
  }, false);
})();
</script>
{% endblock %}
